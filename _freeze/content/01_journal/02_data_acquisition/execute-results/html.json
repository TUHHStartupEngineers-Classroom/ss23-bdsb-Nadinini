{
  "hash": "1afc06269df40b5e96c22d5d207d5bf6",
  "result": {
    "markdown": "---\ntitle: \"Data Acquisition\"\nauthor: \"Nadine Hartlef\"\n---\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-1_39b7fad9eb8b9c86788766d41be77c8e'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(rvest)     # HTML Hacking & Web Scraping\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attache Paket: 'rvest'\n#> \n#> Das folgende Objekt ist maskiert 'package:readr':\n#> \n#>     guess_encoding\n```\n:::\n\n```{.r .cell-code}\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attache Paket: 'jsonlite'\n#> \n#> Das folgende Objekt ist maskiert 'package:purrr':\n#> \n#>     flatten\n```\n:::\n\n```{.r .cell-code}\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(furrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Lade nötiges Paket: future\n```\n:::\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(lubridate)\nlibrary(ggplot2)\n\nget_fastest_racetime <- function(season){\nf1_season_data <- glue(\"http://ergast.com/api/f1/\",season,\".json\") %>%GET()\nraw_f1_season_data <- f1_season_data %>% \n  .$content %>% \n  rawToChar()%>% \n  fromJSON()\n\n# determine the number of the race which was on Circuit de Spa-Francorchamps in that season\ncircuit_names <- raw_f1_season_data %>% \n  purrr:::pluck(\"MRData\",\"RaceTable\",\"Races\",\"Circuit\",\"circuitName\") %>%\n  enframe() %>%\n  rename(race_num = name) %>% rename(track = value)\n  track_index <- filter(circuit_names,track == 'Circuit de Spa-Francorchamps') %>%.$race_num\n\n\n#get data from the specific race and determine fastest time\nf1_race_data <- glue(\"http://ergast.com/api/f1/\",season,\"/\",track_index,\"/results.json\") %>% GET()\nraw_f1_race_data <- f1_race_data %>% .$content %>% rawToChar()%>% fromJSON()\nfastest_time <- raw_f1_race_data %>% purrr:::pluck(\"MRData\",\"RaceTable\",\"Races\",\"Results\",1,\"Time\",\"time\",1)\nfastest_time <- list(\n  season = as.character(season),\n  time = fastest_time\n     )\n}\n\nseasons = c(2010:2020)\nlaptimes <- map(seasons,get_fastest_racetime) %>% bind_rows()\nlaptimes\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"season\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"time\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"2010\",\"2\":\"1:29:04.268\"},{\"1\":\"2011\",\"2\":\"1:26:44.893\"},{\"1\":\"2012\",\"2\":\"1:29:08.530\"},{\"1\":\"2013\",\"2\":\"1:23:42.196\"},{\"1\":\"2014\",\"2\":\"1:24:36.556\"},{\"1\":\"2015\",\"2\":\"1:23:40.387\"},{\"1\":\"2016\",\"2\":\"1:44:51.058\"},{\"1\":\"2017\",\"2\":\"1:24:42.820\"},{\"1\":\"2018\",\"2\":\"1:23:34.476\"},{\"1\":\"2019\",\"2\":\"1:23:45.710\"},{\"1\":\"2020\",\"2\":\"1:24:08.761\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#convert to seconds for visualization\nlaptimes_second <- laptimes$time %>% \n  hms()\nlaptimes_second <- hour(laptimes_second)*3600 + minute(laptimes_second)*60 + second(laptimes_second)\nlaptimes = mutate(laptimes, time_seconds = laptimes_second)\n\n#Visualization\nlaptimes %>%\n  ggplot(aes(x = season, y = time_seconds)) +\n  geom_col() + \n  scale_y_continuous() +\n  labs(\n    title    = \"Total Race Time in F1\",\n    subtitle = \"Track: Circuit de Spa-Francorchamps\",\n    x = \"Season\",\n    y = \"Race Time in [s]\"\n  )\n```\n\n::: {.cell-output-display}\n![](02_data_acquisition_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#second part\n url_rennrad <- \"https://www.rosebikes.de/fahrr%C3%A4der/rennrad\"\n html_rennrad <- read_html(url_rennrad)\n bike_model_urls <- html_rennrad %>%\n   html_nodes(css = '.catalog-category-bikes__list-item') %>%\n   html_nodes(css = '.row.align-middle > a') %>%\n   html_attr('href') %>%\n   enframe( value = \"subdirectory\") %>%\n   mutate(url = glue(\"https://www.rosebikes.de{subdirectory}\")) %>%\n   transmute(url = as.character(url)) %>%\n   select(url) \n \n get_model_name <- function(bike_model_url){\n  html_model <- read_html(bike_model_url)\n  bike_model_names <- html_model %>%\n   html_nodes(css = '.catalog-category-model__title') %>%\n   html_text() %>%\n   stringr::str_extract(\"(?<=\\\\n).+(?=\\\\n)\") %>%\n    as_tibble() \n }\n \n get_model_price <- function(bike_model_url){\n  html_model <- read_html(bike_model_url)\n  bike_model_price <- html_model%>%\n   html_nodes(css = '.product-tile-price__current-value.catalog-category-model__price-current-value') %>%\n   html_text() %>%\n   stringr::str_extract(\"(?<=\\\\n).+(?=\\\\n)\")%>%\n    as_tibble()\n }\n model_names <- map(bike_model_urls$url,get_model_name) %>% \n   bind_rows() %>% \n   transmute(model = value)\n model_prices <- map(bike_model_urls$url,get_model_price) %>%\n   bind_rows() %>% \n   transmute(price = value)\n \n bike_modelbase <- bind_cols(model_names,model_prices)\n \n #Bikes in category \"Rennrad\"\n print(bike_modelbase)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 49 × 2\n#>    model      price                       \n#>    <chr>      <chr>                       \n#>  1 \"        \" \"                2.999,00 €\"\n#>  2 \"        \" \"                3.299,00 €\"\n#>  3 \"        \" \"                3.599,00 €\"\n#>  4 \"        \" \"                4.599,00 €\"\n#>  5 \"        \" \"                4.599,00 €\"\n#>  6 \"        \" \"                4.999,00 €\"\n#>  7 \"        \" \"                3.999,00 €\"\n#>  8 \"        \" \"                5.999,00 €\"\n#>  9 \"        \" \"                5.999,00 €\"\n#> 10 \"        \" \"                6.499,00 €\"\n#> # ℹ 39 more rows\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}