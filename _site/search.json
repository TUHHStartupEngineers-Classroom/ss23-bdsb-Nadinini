[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "# 1.0 Load libraries ----\nlibrary(readr)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(stats)\nlibrary(writexl)\nlibrary(lubridate)\nlibrary(lobstr)\n\n\n# 2.0 Importing Files ----\norderlines_tbl <- read_excel(\"C:\\\\Users\\\\nadin\\\\Documents\\\\GitHub\\\\ss23-bdsb-Nadinini\\\\01_bike_sales\\\\01_raw_data\\\\orderlines.xlsx\")\n\n#> New names:\n#> • `` -> `...1`\n\nbikes_tbl      <- read_excel(\"C:\\\\Users\\\\nadin\\\\Documents\\\\GitHub\\\\ss23-bdsb-Nadinini\\\\01_bike_sales\\\\01_raw_data\\\\bikes.xlsx\")\nbikeshops_tbl  <- read_excel(\"C:\\\\Users\\\\nadin\\\\Documents\\\\GitHub\\\\ss23-bdsb-Nadinini\\\\01_bike_sales\\\\01_raw_data\\\\bikeshops.xlsx\")\n\n# 3.0 Examining Data ----\n#glimpse()\n\n# 4.0 Joining Data ----\nbike_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(tidyverse) # Main Package - Loads dplyr, purrr, etc.\nlibrary(rvest)     # HTML Hacking & Web Scraping\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(furrr)\nlibrary(httr)\nlibrary(lubridate)\nlibrary(ggplot2)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(tidyverse)\nlibrary(vroom)\nlibrary(data.table)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "library(tidyverse)\nlibrary(zoo)\nlibrary(lubridate)\nlibrary(maps)\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#> Rows: 313070 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n1 Time course of the cumulative Covid-19 cases\n\n#challenge part 1\ncovid_data_pt1 <- tibble(location = covid_data_tbl$location,\n                         date = covid_data_tbl$date,\n                         total_cases = covid_data_tbl$total_cases)\n#edit data\ncovid_data_plot <- covid_data_pt1 %>% \n  filter(location %in% c(\"Germany\",\"France\",\"Spain\",\"Germany\",\"United Kingdom\",\"United States\",\"Europe\")) %>%\nfilter(!is.na(total_cases))\n\ncovid_dates <- covid_data_plot$date %>%\n  sort() \ncurrent_date <- covid_dates%>% tail(n=1)\nlabel_dates <- covid_dates %>%\n  as.yearmon() %>%\n  unique()\n\n  \n\ncovid_data_plot %>%\nggplot(aes(date, total_cases)) +\n\n  geom_line(aes(color = location), linewidth = 1) + \n  labs(\n    title = \"COVID-19 confirmed cases worldwide\",\n    subtitle = str_glue(\"As of {mday(current_date)}/{month(current_date)}/{year(current_date)}\"),\n    x = \"\",\n    y = \"Cumulative Cases\",\n    color = \"Continent/Country\"\n  )+\n scale_x_continuous(breaks = seq(as.Date(\"2020-01-01\"),by = \"1 month\", length.out = length(label_dates)),\n                    labels = label_dates) +\n  scale_y_continuous(labels = scales::dollar_format(scale  = 1/1e6, \n                                                    prefix = \"\", \n                                                    suffix = \"M\")) +\n  theme_dark()+\n  theme(legend.position = \"bottom\",\n        axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n\n2 The distribution of the mortality rate\n\n# Part 2 of the challenge\nworld <- map_data(\"world\")\ncovid_data_world <- covid_data_tbl %>%\n  mutate(location = case_when(\n    \n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %>%\n  distinct() %>%\n  filter(date == current_date)\n\nworld_data <- left_join(world,covid_data_world, by = c(\"region\"=\"location\")) %>%\n  mutate(mortality = total_deaths/population) %>%\n  select(long,lat, region,mortality) \n\n\nids <- world_data %>% select(region,mortality) %>%\n  unique()%>% .$region %>%factor()\nvalues <- data.frame(\n  id = ids,\n  value = world_data %>% select(region,mortality) %>%\n   unique()%>% .$mortality\n)\npositions <- data.frame(\n  id = factor(world_data$region),\n  x = world_data$long,\n  y = world_data$lat\n)\n\n  ggplot(values,aes(fill = value)) +\n  geom_map(aes(map_id = id), map = world) +\n  expand_limits(positions) + \n    labs(\n      title = \"Confirmed COVID-19 deaths relative to the size of the population\",\n      x = \"\",\n      y = \"\",\n      caption = str_glue(\"Date: {mday(current_date)}/{month(current_date)}/{year(current_date)}\")\n    )+\n    theme(\n      axis.text.x = element_blank(),\n      axis.text.y = element_blank())+\n    theme_dark()+\n    scale_x_continuous(labels = rep(\"\", 4), breaks = c(-100,0,100,200))+\n    scale_y_continuous(labels = rep(\"\", 3), breaks = c(-50,0,50))+\n    scale_fill_continuous(name = \"Mortality Rate\",\n                          breaks = c(0.0005,0.001,0.0015,0.002,0.0025),\n                          labels = scales::dollar_format(accuracy = .001,\n                            scale = 100,\n                            prefix = \"\",\n                                                         suffix = \"%\"),\n      low=\"tomato\", high=\"red4\", \n                           guide=\"colorbar\",na.value=\"white\")"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html#header-2",
    "href": "content/02_notes/05_class_notes.html#header-2",
    "title": "Class Notes",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nHeader 4\n\nHeader 5\n\nHeader 6"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#challenge-sales-by-location",
    "href": "content/01_journal/01_tidyverse.html#challenge-sales-by-location",
    "title": "Tidyverse",
    "section": "\n2 Challenge Sales by location",
    "text": "2 Challenge Sales by location\n\n# 5.0 Wrangling Data and Writing File ----\n\n  bike_orderlines_wrangled_tbl <- bike_joined_tbl %>%\n  separate(col    = category,\n           into   = c(\"category.1\",\"category.2\",\"category.3\"),\n           sep    = \" - \") %>%\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %>%\n  mutate(total.price = price * quantity) %>%\n  select(-...1, -gender) %>%\n  select(-ends_with(\".id\")) %>%\n  bind_cols(bike_joined_tbl %>% select(order.id)) %>% \n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\n\nsales_by_loc_tbl <- bike_orderlines_wrangled_tbl %>%\n  select(state, total_price) %>%\n  group_by(state) %>% \n  summarize(sales = sum(total_price)) %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_loc_tbl\n\n\n\n  \n\n\n#{r plot, fig.width=10, fig.height=7} # für markdown \n\nsales_by_loc_tbl %>%\n  ggplot(aes(x = state, y = sales)) +\n  geom_col(fill = \"#2DC6D6\") + \n  geom_label(aes(label = sales_text)) +  \n  geom_smooth(method = \"lm\", se = FALSE) + \n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title    = \"Sales by location\",\n    subtitle = \"for states in Germany\",\n    x = \"\",\n    y = \"Revenue\"\n  )\n\n#> `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#second-part-sales-by-location-and-year",
    "href": "content/01_journal/01_tidyverse.html#second-part-sales-by-location-and-year",
    "title": "Tidyverse",
    "section": "\n4.1 Second Part, sales by location and year",
    "text": "4.1 Second Part, sales by location and year\n\nsales_by_loc_year_tbl <- bike_orderlines_wrangled_tbl %>%\n#select(order.date,total_price,state) %>%\n  mutate(year=year(order_date)) %>%\n  group_by(state, year) %>% \n  summarize(sales = sum(total_price)) %>%\n  ungroup() %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n\nsales_by_loc_year_tbl\n\n\n\n  \n\n\nsales_by_loc_year_tbl %>%\n    ggplot(aes(x = year, y = sales, fill = state))  +\n      geom_col()+\n      facet_wrap(~state)+\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  #theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title    = \"Sales by location\",\n    subtitle = \"for states in Germany\",\n   fill= \"location\"\n  )\n\n\n\n\n\n\n#bike_orderlines_wrangled_tbl %>%\n    #write_xlsx(\"content/01_bike_sales/bike_orderlines_wrangled.xlsx\")\n\n#plot(sales_by_loc_year_tbl)"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#sales-analysis-second-part--",
    "href": "content/01_journal/01_tidyverse.html#sales-analysis-second-part--",
    "title": "Tidyverse",
    "section": "\n2 SALES ANALYSIS Second Part —-",
    "text": "2 SALES ANALYSIS Second Part —-\n\nsales_by_loc_year_tbl <- bike_orderlines_wrangled_tbl %>%\n#select(order.date,total_price,state) %>%\n  mutate(year=year(order_date)) %>%\n  group_by(state, year) %>% \n  summarize(sales = sum(total_price)) %>%\n  ungroup() %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n\nsales_by_loc_year_tbl\n\n\n\n  \n\n\nsales_by_loc_year_tbl %>%\n    ggplot(aes(x = year, y = sales, fill = state))  +\n      geom_col()+\n      facet_wrap(~state)+\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  #theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title    = \"Sales by location\",\n    subtitle = \"for states in Germany\",\n   fill= \"location\"\n  )\n\n\n\n\n\n\n#bike_orderlines_wrangled_tbl %>%\n    #write_xlsx(\"content/01_bike_sales/bike_orderlines_wrangled.xlsx\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#second-part-location-and-year",
    "href": "content/01_journal/01_tidyverse.html#second-part-location-and-year",
    "title": "Tidyverse",
    "section": "\n3 Second Part: Location and year",
    "text": "3 Second Part: Location and year\n\nsales_by_loc_year_tbl <- bike_orderlines_wrangled_tbl %>%\n#select(order.date,total_price,state) %>%\n  mutate(year=year(order_date)) %>%\n  group_by(state, year) %>% \n  summarize(sales = sum(total_price)) %>%\n  ungroup() %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n\nsales_by_loc_year_tbl\n\n\n\n  \n\n\nsales_by_loc_year_tbl %>%\n    ggplot(aes(x = year, y = sales, fill = state))  +\n      geom_col()+\n      facet_wrap(~state)+\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  #theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title    = \"Sales by location\",\n    subtitle = \"for states in Germany\",\n   fill= \"location\"\n  )\n\n\n\n\n\n\n#bike_orderlines_wrangled_tbl %>%\n    #write_xlsx(\"content/01_bike_sales/bike_orderlines_wrangled.xlsx\")"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#first-part",
    "href": "content/01_journal/03_data_wrangling.html#first-part",
    "title": "Data Wrangling",
    "section": "\n3.1 First part",
    "text": "3.1 First part\n\n#part 1 of the challenge\n\ndata_pt1_joined <- left_join(assignee_tbl,patent_assignee_tbl,by = c(\"id\"=\"assignee_id\"))\n\ndata_pt1_US <- data_pt1_joined %>%\n  data.table() %>%\n  .[type == 2]\npatent_numbers <- data_pt1_US[,.N,by = list(id,organization)][\n  ,.(organization,id,patents = N)][\n  order(patents,decreasing = TRUE )]\n\ncat(\"Company/Organization with the most patents: \",patent_numbers[\n  1,organization],\"with \",patent_numbers[1,patents],\"patents\" )\n\n#> Company/Organization with the most patents:  International Business Machines Corporation with  7547 patents\n\n#10 US Companies with the most assigned/granted patents\nprint(patent_numbers[1:10,list(organization,patents),])\n\n#>                                    organization patents\n#>  1: International Business Machines Corporation    7547\n#>  2:                       Microsoft Corporation    3165\n#>  3:                                 Google Inc.    2668\n#>  4:                       QUALCOMM Incorporated    2597\n#>  5:                                  Apple Inc.    2201\n#>  6:                    General Electric Company    1873\n#>  7:   Hewlett-Packard Development Company, L.P.    1638\n#>  8:          AT&T INTELLECTUAL PROPERTY I, L.P.    1625\n#>  9:                           Intel Corporation    1616\n#> 10:         GM Global Technology Operations LLC    1533"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#second-part",
    "href": "content/01_journal/03_data_wrangling.html#second-part",
    "title": "Data Wrangling",
    "section": "\n3.2 Second part",
    "text": "3.2 Second part\n\n# part 2 of the challenge\n\ndata_pt2_joined <- left_join(data_pt1_joined,patent_tbl,by = c(\"patent_id\"=\"id\"))\n# since patent_tbl contains patent ids, that have no assigned organization or matching\n# assignee id in the patent_assignee list and we search for organizations, left_join()\n# is performed in this order, so the result only contains patent ids that are assigned to \n# an organization\n\ndata_pt2_august_US <-data_pt2_joined %>%\n  data.table() %>%\n  .[type == 2 & month(date)==8]\n\npatent_numbers_august <- data_pt2_august_US[,.N,by = list(id,organization)][\n  ,.(organization,id,patents = N)][\n    order(patents,decreasing = TRUE )]\n\ncat(\"Company/Organization with the most patents in August 2014: \",patent_numbers_august[\n  1,organization],\"with \",patent_numbers_august[1,patents],\"patents\" )\n\n#> Company/Organization with the most patents in August 2014:  International Business Machines Corporation with  718 patents\n\n#10 US Companies with the most assigned/granted patents in August 2014:\nprint(patent_numbers_august[1:10,list(organization,patents),])\n\n#>                                    organization patents\n#>  1: International Business Machines Corporation     718\n#>  2:                       Microsoft Corporation     337\n#>  3:                                 Google Inc.     240\n#>  4:                       QUALCOMM Incorporated     223\n#>  5:                                  Apple Inc.     222\n#>  6:                           Intel Corporation     159\n#>  7:                    General Electric Company     148\n#>  8:          AT&T INTELLECTUAL PROPERTY I, L.P.     146\n#>  9:   Hewlett-Packard Development Company, L.P.     140\n#> 10:         GM Global Technology Operations LLC     138"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#third-part",
    "href": "content/01_journal/03_data_wrangling.html#third-part",
    "title": "Data Wrangling",
    "section": "\n3.3 Third part",
    "text": "3.3 Third part\n\n#part 3 of the challenge\nuspc_data_tbl <-uspc_tbl %>% select(patent_id,mainclass_id) %>%\n  unique() %>% data.table()\n\ndata_pt3_joined <- left_join(uspc_data_tbl,data_pt1_joined,\n                             by = c(\"patent_id\"=\"patent_id\"))%>%\n      .[!is.na(organization)]\n\n#> Warning in left_join(uspc_data_tbl, data_pt1_joined, by = c(patent_id = \"patent_id\")): Detected an unexpected many-to-many relationship between `x` and `y`.\n#> ℹ Row 16 of `x` matches multiple rows in `y`.\n#> ℹ Row 216013 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set `relationship =\n#>   \"many-to-many\"` to silence this warning.\n\n   #take all assigned patents regarding tech classes and subtract the ones that cannot\n  # be evaluated since no organization is assigned to them\n\n\ndata_pt3_world <- data_pt1_joined %>%\n  data.table() %>%\n  .[type == 2| type == 3]\n\npatent_numbers_world <- data_pt3_world[,.N,by = list(id,organization)][\n  ,.(organization,id,patents = N)][\n    order(patents,decreasing = TRUE )]\n\ntop_10_organizations <-patent_numbers_world[1:10,list(organization),]\n\ntech_classes <- data_pt3_joined %>% \n  filter(organization %in% top_10_organizations$organization) %>%\n  .[,.N,by = (mainclass_id)] %>%\n  .[,.(mainclass_id,patents = N)] %>%\n  .[order(patents,decreasing = TRUE )] \n\n# Top 5 tech main classes:\nprint(tech_classes[1:5])\n\n#>    mainclass_id patents\n#> 1:          257    2790\n#> 2:          370    2528\n#> 3:          455    2453\n#> 4:          709    1981\n#> 5:          348    1875"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#first-part-sales-by-location",
    "href": "content/01_journal/01_tidyverse.html#first-part-sales-by-location",
    "title": "Tidyverse",
    "section": "\n2 First Part: Sales by location",
    "text": "2 First Part: Sales by location\n\n# 5.0 Wrangling Data and Writing File ----\n\n  bike_orderlines_wrangled_tbl <- bike_joined_tbl %>%\n  separate(col    = category,\n           into   = c(\"category.1\",\"category.2\",\"category.3\"),\n           sep    = \" - \") %>%\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %>%\n  mutate(total.price = price * quantity) %>%\n  select(-...1, -gender) %>%\n  select(-ends_with(\".id\")) %>%\n  bind_cols(bike_joined_tbl %>% select(order.id)) %>% \n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\n\nsales_by_loc_tbl <- bike_orderlines_wrangled_tbl %>%\n  select(state, total_price) %>%\n  group_by(state) %>% \n  summarize(sales = sum(total_price)) %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_loc_tbl\n\n\n\n  \n\n\n#{r plot, fig.width=10, fig.height=7} # für markdown \n\nsales_by_loc_tbl %>%\n  ggplot(aes(x = state, y = sales)) +\n  geom_col(fill = \"#2DC6D6\") + \n  geom_label(aes(label = sales_text)) +  \n  geom_smooth(method = \"lm\", se = FALSE) + \n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title    = \"Sales by location\",\n    subtitle = \"for states in Germany\",\n    x = \"\",\n    y = \"Revenue\"\n  )\n\n#> `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#second-part",
    "href": "content/01_journal/02_data_acquisition.html#second-part",
    "title": "Data Acquisition",
    "section": "\n3.1 Second part",
    "text": "3.1 Second part\n\n#second part\n url_rennrad <- \"https://www.rosebikes.de/fahrr%C3%A4der/rennrad\"\n html_rennrad <- read_html(url_rennrad)\n bike_model_urls <- html_rennrad %>%\n   html_nodes(css = '.catalog-category-bikes__list-item') %>%\n   html_nodes(css = '.row.align-middle > a') %>%\n   html_attr('href') %>%\n   enframe( value = \"subdirectory\") %>%\n   mutate(url = glue(\"https://www.rosebikes.de{subdirectory}\")) %>%\n   transmute(url = as.character(url)) %>%\n   select(url) \n \n get_model_name <- function(bike_model_url){\n  html_model <- read_html(bike_model_url)\n  bike_model_names <- html_model %>%\n   html_nodes(css = '.catalog-category-model__title') %>%\n   html_text() %>%\n   stringr::str_extract(\"(?<=\\\\n).+(?=\\\\n)\") %>%\n    as_tibble() \n }\n \n get_model_price <- function(bike_model_url){\n  html_model <- read_html(bike_model_url)\n  bike_model_price <- html_model%>%\n   html_nodes(css = '.product-tile-price__current-value.catalog-category-model__price-current-value') %>%\n   html_text() %>%\n   stringr::str_extract(\"(?<=\\\\n).+(?=\\\\n)\")%>%\n    as_tibble()\n }\n model_names <- map(bike_model_urls$url,get_model_name) %>% \n   bind_rows() %>% \n   transmute(model = value)\n model_prices <- map(bike_model_urls$url,get_model_price) %>%\n   bind_rows() %>% \n   transmute(price = value)\n \n bike_modelbase <- bind_cols(model_names,model_prices)\n \n #Bikes in category \"Rennrad\"\n print(bike_modelbase)\n\n#> # A tibble: 49 × 2\n#>    model      price                       \n#>    <chr>      <chr>                       \n#>  1 \"        \" \"                2.999,00 €\"\n#>  2 \"        \" \"                3.299,00 €\"\n#>  3 \"        \" \"                3.599,00 €\"\n#>  4 \"        \" \"                4.599,00 €\"\n#>  5 \"        \" \"                4.599,00 €\"\n#>  6 \"        \" \"                4.999,00 €\"\n#>  7 \"        \" \"                3.999,00 €\"\n#>  8 \"        \" \"                5.999,00 €\"\n#>  9 \"        \" \"                5.999,00 €\"\n#> 10 \"        \" \"                6.499,00 €\"\n#> # ℹ 39 more rows"
  }
]