[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "1 Business Case\n\n\n2 Data Science at TUHH ——————————————————\n\n\n3 SALES ANALYSIS —-\n\n\n4 1.0 Load libraries —-\nlibrary(readr) library(readxl) library(tidyverse) library(stats) library(writexl) library(lubridate) library(lobstr)\n# 2.0 Importing Files ----\norderlines_tbl <- read_excel(\"ss23-bdsb-Nadinini/content/01_bike_sales/01_raw_data/orderlines.xlsx\")\nbikes_tbl      <- read_excel(\"content/01_bike_sales/01_raw_data/bikes.xlsx\")\nbikeshops_tbl  <- read_excel(\"content/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n# 3.0 Examining Data ----\n#glimpse()\n\n# 4.0 Joining Data ----\nbike_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# 5.0 Wrangling Data and Writing File ----\n\n## Challenge Sales by location\n  bike_orderlines_wrangled_tbl <- bike_joined_tbl %>%\n  separate(col    = category,\n           into   = c(\"category.1\",\"category.2\",\"category.3\"),\n           sep    = \" - \") %>%\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %>%\n  mutate(total.price = price * quantity) %>%\n  select(-...1, -gender) %>%\n  select(-ends_with(\".id\")) %>%\n  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% \n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\n\nsales_by_loc_tbl <- bike_orderlines_wrangled_tbl %>%\n  select(state, total_price) %>%\n  group_by(state) %>% \n  summarize(sales = sum(total_price)) %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_loc_tbl\n\n#{r plot, fig.width=10, fig.height=7} # für markdown \n\nsales_by_loc_tbl %>%\n  ggplot(aes(x = state, y = sales)) +\n  geom_col(fill = \"#2DC6D6\") + \n  geom_label(aes(label = sales_text)) +  \n  geom_smooth(method = \"lm\", se = FALSE) + \n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title    = \"Sales by location\",\n    subtitle = \"for states in Germany\",\n    x = \"\",\n    y = \"Revenue\"\n  )\n\n## Second Part, sales by location and year\nsales_by_loc_year_tbl <- bike_orderlines_wrangled_tbl\nselect(order_date,total_price,state) %>%\n  mutate(year=year(order_date)) %>%\n  group_by(state, year) %>% \n  summarize(sales = sum(total_price)) %>%\n  ungroup() %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\nsales_by_loc_year_tbl\n\nsales_by_loc_year_tbl %>%\n  ggplot(aes(x = state, y = sales, fill = location)) +\n  geom_col()\nfacet_wrap(~ location)\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title    = \"Sales by location\",\n    subtitle = \"for states in Germany\",\n   fill= \"location\"\n  )\n  \nbike_orderlines_wrangled_tbl %>%\n    write_xlsx(\"content/01_bike_sales/bike_orderlines_wrangled.xlsx\")"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\n\n\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc. library(rvest) # HTML Hacking & Web Scraping library(xopen) # Quickly opening URLs library(jsonlite) # converts JSON files to R objects library(glue) # concatenate strings library(stringi) # character string/text processing library(furrr) library(httr) library(lubridate) library(ggplot2)\nget_fastest_racetime <- function(season){ f1_season_data <- glue(“http://ergast.com/api/f1/”,season,“.json”) %>%GET() raw_f1_season_data <- f1_season_data %>% .$content %>% rawToChar()%>% fromJSON()\n\n1 determine the number of the race which was on Circuit de Spa-Francorchamps in that season\ncircuit_names <- raw_f1_season_data %>% purrr:::pluck(“MRData”,“RaceTable”,“Races”,“Circuit”,“circuitName”) %>% enframe() %>% rename(race_num = name) %>% rename(track = value) track_index <- filter(circuit_names,track == ‘Circuit de Spa-Francorchamps’) %>%.$race_num\n#get data from the specific race and determine fastest time f1_race_data <- glue(“http://ergast.com/api/f1/”,season,“/”,track_index,“/results.json”) %>% GET() raw_f1_race_data <- f1_race_data %>% .$content %>% rawToChar()%>% fromJSON() fastest_time <- raw_f1_race_data %>% purrr:::pluck(“MRData”,“RaceTable”,“Races”,“Results”,1,“Time”,“time”,1) fastest_time <- list( season = as.character(season), time = fastest_time ) }\nseasons = c(2010:2020) laptimes <- map(seasons,get_fastest_racetime) %>% bind_rows() laptimes\n#convert to seconds for visualization laptimes_second <- laptimes$time %>% hms() laptimes_second <- hour(laptimes_second)3600 + minute(laptimes_second)60 + second(laptimes_second) laptimes = mutate(laptimes, time_seconds = laptimes_second)\n#Visualization laptimes %>% ggplot(aes(x = season, y = time_seconds)) + geom_col() + scale_y_continuous() + labs( title = “Total Race Time in F1”, subtitle = “Track: Circuit de Spa-Francorchamps”, x = “Season”, y = “Race Time in [s]” )\n#second part url_rennrad <- “https://www.rosebikes.de/fahrr%C3%A4der/rennrad” html_rennrad <- read_html(url_rennrad) bike_model_urls <- html_rennrad %>% html_nodes(css = ’.catalog-category-bikes__list-item’) %>% html_nodes(css = ‘.row.align-middle > a’) %>% html_attr(‘href’) %>% enframe( value = “subdirectory”) %>% mutate(url = glue(“https://www.rosebikes.de{subdirectory}”)) %>% transmute(url = as.character(url)) %>% select(url)\nget_model_name <- function(bike_model_url){ html_model <- read_html(bike_model_url) bike_model_names <- html_model %>% html_nodes(css = ’.catalog-category-model__title’) %>% html_text() %>% stringr::str_extract(“(?<=\\n).+(?=\\n)”) %>% as_tibble() }\nget_model_price <- function(bike_model_url){ html_model <- read_html(bike_model_url) bike_model_price <- html_model%>% html_nodes(css = ’.product-tile-price__current-value.catalog-category-model__price-current-value’) %>% html_text() %>% stringr::str_extract(“(?<=\\n).+(?=\\n)”)%>% as_tibble() } model_names <- map(bike_model_urls\\(url,get_model_name) %>%  bind_rows() %>%  transmute(model = value)  model_prices <- map(bike_model_urls\\)url,get_model_price) %>% bind_rows() %>% transmute(price = value)\nbike_modelbase <- bind_cols(model_names,model_prices)\n#Bikes in category “Rennrad” print(bike_modelbase)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\n\n\nlibrary(tidyverse) library(vroom) library(data.table)\ncol_types_patent <- list( id = col_character(), date = col_date(“%Y-%m-%d”), num_claims = col_double() )\npatent_tbl <- vroom( file = “03_scripts/patent.tsv”, delim = “, col_names = names(col_types_patent), col_types = col_types_patent, na = c(”“,”NA”, “NULL”) ) %>% slice(2:nrow(.))\ncol_types_patent_assignee <- list( patent_id = col_character(), assignee_id = col_character() )\npatent_assignee_tbl <- vroom( file = “03_scripts/patent_assignee.tsv”, delim = “, col_names = names(col_types_patent_assignee), col_types = col_types_patent_assignee, na = c(”“,”NA”, “NULL”) ) %>% slice(2:nrow(.))\ncol_types_assignee <- list( id = col_character(), type = col_integer(), organization = col_character() )\nassignee_tbl <- vroom( file = “03_scripts/assignee.tsv”, delim = “, col_names = names(col_types_assignee), col_types = col_types_assignee, na = c(”“,”NA”, “NULL”) )%>% slice(2:nrow(.))\ncol_types_uspc <- list( patent_id = col_character(), mainclass_id = col_integer(), sequence = col_integer() )\nuspc_tbl <- vroom( file = “03_scripts/uspc.tsv”, delim = “, col_names = names(col_types_uspc), col_types = col_types_uspc, na = c(”“,”NA”, “NULL”) )%>% slice(2:nrow(.))\n#part 1 of the challenge\ndata_pt1_joined <- left_join(assignee_tbl,patent_assignee_tbl,by = c(“id”=“assignee_id”))\ndata_pt1_US <- data_pt1_joined %>% data.table() %>% .[type == 2] patent_numbers <- data_pt1_US[,.N,by = list(id,organization)][ ,.(organization,id,patents = N)][ order(patents,decreasing = TRUE )]\ncat(“Company/Organization with the most patents:”,patent_numbers[ 1,organization],“with”,patent_numbers[1,patents],“patents” )\n#10 US Companies with the most assigned/granted patents print(patent_numbers[1:10,list(organization,patents),])\n\n1 part 2 of the challenge\ndata_pt2_joined <- left_join(data_pt1_joined,patent_tbl,by = c(“patent_id”=“id”)) # since patent_tbl contains patent ids, that have no assigned organization or matching # assignee id in the patent_assignee list and we search for organizations, left_join() # is performed in this order, so the result only contains patent ids that are assigned to # an organization\ndata_pt2_august_US <-data_pt2_joined %>% data.table() %>% .[type == 2 & month(date)==8]\npatent_numbers_august <- data_pt2_august_US[,.N,by = list(id,organization)][ ,.(organization,id,patents = N)][ order(patents,decreasing = TRUE )]\ncat(“Company/Organization with the most patents in August 2014:”,patent_numbers_august[ 1,organization],“with”,patent_numbers_august[1,patents],“patents” )\n#10 US Companies with the most assigned/granted patents in August 2014: print(patent_numbers_august[1:10,list(organization,patents),])\n#part 3 of the challenge uspc_data_tbl <-uspc_tbl %>% select(patent_id,mainclass_id) %>% unique() %>% data.table()\ndata_pt3_joined <- left_join(uspc_data_tbl,data_pt1_joined, by = c(“patent_id”=“patent_id”))%>% .[!is.na(organization)] #take all assigned patents regarding tech classes and subtract the ones that cannot # be evaluated since no organization is assigned to them\ndata_pt3_world <- data_pt1_joined %>% data.table() %>% .[type == 2| type == 3]\npatent_numbers_world <- data_pt3_world[,.N,by = list(id,organization)][ ,.(organization,id,patents = N)][ order(patents,decreasing = TRUE )]\ntop_10_organizations <-patent_numbers_world[1:10,list(organization),]\ntech_classes <- data_pt3_joined %>% filter(organization %in% top_10_organizations$organization) %>% .[,.N,by = (mainclass_id)] %>% .[,.(mainclass_id,patents = N)] %>% .[order(patents,decreasing = TRUE )] # Top 5 tech main classes: print(tech_classes[1:5])"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\n\n\nlibrary(tidyverse) library(zoo) library(lubridate) library(maps) covid_data_tbl <- read_csv(“https://covid.ourworldindata.org/data/owid-covid-data.csv”)\n#challenge part 1 covid_data_pt1 <- tibble(location = covid_data_tbl\\(location,  date = covid_data_tbl\\)date, total_cases = covid_data_tbl$total_cases) #edit data covid_data_plot <- covid_data_pt1 %>% filter(location %in% c(“Germany”,“France”,“Spain”,“Germany”,“United Kingdom”,“United States”,“Europe”)) %>% filter(!is.na(total_cases))\ncovid_dates <- covid_data_plot$date %>% sort() current_date <- covid_dates%>% tail(n=1) label_dates <- covid_dates %>% as.yearmon() %>% unique()\ncovid_data_plot %>% ggplot(aes(date, total_cases)) +\ngeom_line(aes(color = location), size = 1) + labs( title = “COVID-19 confirmed cases worldwide”, subtitle = str_glue(“As of {mday(current_date)}/{month(current_date)}/{year(current_date)}”), x = ““, y =”Cumulative Cases”, color = “Continent/Country” )+ scale_x_continuous(breaks = seq(as.Date(“2020-01-01”),by = “1 month”, length.out = length(label_dates)), labels = label_dates) + scale_y_continuous(labels = scales::dollar_format(scale = 1/1e6, prefix = ““, suffix =”M”)) + theme_dark()+ theme(legend.position = “bottom”, axis.text.x = element_text(angle = 45, hjust = 1) )\n\n1 Part 2 of the challenge\nworld <- map_data(“world”) covid_data_world <- covid_data_tbl %>% mutate(location = case_when(\nlocation == \"United Kingdom\" ~ \"UK\",\nlocation == \"United States\" ~ \"USA\",\nlocation == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\nTRUE ~ location\n)) %>% distinct() %>% filter(date == current_date)\nworld_data <- left_join(world,covid_data_world, by = c(“region”=“location”)) %>% mutate(mortality = total_deaths/population) %>% select(long,lat, region,mortality)\nids <- world_data %>% select(region,mortality) %>% unique()%>% .\\(region %>%factor() values <- data.frame(  id = ids,  value = world_data %>% select(region,mortality) %>%  unique()%>% .\\)mortality ) positions <- data.frame( id = factor(world_data\\(region),  x = world_data\\)long, y = world_data$lat )\nggplot(values,aes(fill = value)) + geom_map(aes(map_id = id), map = world) + expand_limits(positions) + labs( title = “Confirmed COVID-19 deaths relative to the size of the population”, x = ““, y =”“, caption = str_glue(”Date: {mday(current_date)}/{month(current_date)}/{year(current_date)}“) )+ theme( axis.text.x = element_blank(), axis.text.y = element_blank())+ theme_dark()+ scale_x_continuous(labels = rep(”“, 4), breaks = c(-100,0,100,200))+ scale_y_continuous(labels = rep(”“, 3), breaks = c(-50,0,50))+ scale_fill_continuous(name =”Mortality Rate”, breaks = c(0.0005,0.001,0.0015,0.002,0.0025), labels = scales::dollar_format(accuracy = .001, scale = 100, prefix = ““, suffix =”%“), low=”tomato”, high=“red4”, guide=“colorbar”,na.value=“white”)"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html#header-2",
    "href": "content/02_notes/05_class_notes.html#header-2",
    "title": "Class Notes",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nHeader 4\n\nHeader 5\n\nHeader 6"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#challenge-sales-by-location",
    "href": "content/01_journal/01_tidyverse.html#challenge-sales-by-location",
    "title": "Tidyverse",
    "section": "8.1 Challenge Sales by location",
    "text": "8.1 Challenge Sales by location\nbike_orderlines_wrangled_tbl <- bike_joined_tbl %>% separate(col = category, into = c(“category.1”,“category.2”,“category.3”), sep = ” - “) %>% separate(col = location, into = c(”city”, “state”), sep = “,”) %>% mutate(total.price = price * quantity) %>% select(-…1, -gender) %>% select(-ends_with(“.id”)) %>% bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% select(order.id, contains(“order”), contains(“model”), contains(“category”), price, quantity, total.price, everything()) %>% set_names(names(.) %>% str_replace_all(“\\.”, “_“))\nsales_by_loc_tbl <- bike_orderlines_wrangled_tbl %>% select(state, total_price) %>% group_by(state) %>% summarize(sales = sum(total_price)) %>% mutate(sales_text = scales::dollar(sales, big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“))\nsales_by_loc_tbl\n#{r plot, fig.width=10, fig.height=7} # für markdown\nsales_by_loc_tbl %>% ggplot(aes(x = state, y = sales)) + geom_col(fill = “#2DC6D6”) + geom_label(aes(label = sales_text)) +\ngeom_smooth(method = “lm”, se = FALSE) + scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + labs( title =”Sales by location”, subtitle = “for states in Germany”, x = ““, y =”Revenue” )"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#second-part-sales-by-location-and-year",
    "href": "content/01_journal/01_tidyverse.html#second-part-sales-by-location-and-year",
    "title": "Tidyverse",
    "section": "8.2 Second Part, sales by location and year",
    "text": "8.2 Second Part, sales by location and year\nsales_by_loc_year_tbl <- bike_orderlines_wrangled_tbl select(order_date,total_price,state) %>% mutate(year=year(order_date)) %>% group_by(state, year) %>% summarize(sales = sum(total_price)) %>% ungroup() %>% mutate(sales_text = scales::dollar(sales, big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) sales_by_loc_year_tbl\nsales_by_loc_year_tbl %>% ggplot(aes(x = state, y = sales, fill = location)) + geom_col() facet_wrap(~ location) scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + labs( title =”Sales by location”, subtitle = “for states in Germany”, fill= “location” )\nbike_orderlines_wrangled_tbl %>% write_xlsx(“content/01_bike_sales/bike_orderlines_wrangled.xlsx”)"
  }
]